function overlayVideos(h)
    if ~isfield(h.d,'border')
        uialert(h.d.f,...
            'No map selected',...
            'Error',...
            'Icon','warning');
        return;
    end
    
    hWB = uiprogressdlg(h.d.f,'Title','Please Wait');

    videoList = h.d.videoList;
    border = h.d.border;
    tform = h.d.tform;
    outputview = imref2d(size(h.d.border));
    n_videos = size(h.d.videoList.Value,2);
    
    % Iterate through videos
    for i = 1:n_videos
                
        % Get current video file pathway
        importPath = videoList.Value{i};
        
        % Update the waitbar
        hWB.Message = ['Regestering images for video ', num2str(i) ' of ' num2str(n_videos) '.' newline importPath];         
                        
        % Set the overlayed-video file pathway
        lastSlash = find(importPath=='/',1,'last');
        importDir = extractBefore(importPath,lastSlash+1);
        importFilename = split(extractAfter(importPath,lastSlash),'.');
        exportPath = [importFilename{1} '_overlay.' importFilename{2}];

        % Get general file info
        importFileInfo = imfinfo(importPath);
        n_frames = size(importFileInfo,2);
        width = fileInfo(1).Width;
        height = fileInfo(1).Height;
        
                
        
        importLink = Tiff(filePath, 'r');
        importLink.setDirectory(1);
        
        exportStream = SaveTiff.start([savePath,saveName],512,256,2,n_frames,true);
        
        I = zeros(height,width,'uint16');
        for f = 1:n_frames
            % Get new frame
            importLink.setDirectory(f);

            I(:,:,end) = importLink.read();
        
            J = getOverlay(I(:,1:256),I(:,257:512),h,outputview);
            
            exportStream.add(J);
            
            hWB.Value = f/n_frames;
            
        end
                
    end
    
    close(hWB);
    
    uialert(h.d.f,...
            'All selected videos were registered.',...
            'Registation Complete',...
            'Icon','success');
end

function O = getOverlay(SL,SR,tform,border,outputview)
    % Warp
    SR = imwarp(SR,tform,'cubic','OutputView',outputview);

    % Clip
    SR(~border) = 0;

    % Overlay
    O = cat(3, SR, SL, SR*0);
end